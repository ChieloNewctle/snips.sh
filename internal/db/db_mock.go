// Code generated by mockery v2.14.0. DO NOT EDIT.

package db

import (
	context "context"

	snips "github.com/robherley/snips.sh/internal/snips"
	mock "github.com/stretchr/testify/mock"
)

// MockDB is an autogenerated mock type for the DB type
type MockDB struct {
	mock.Mock
}

// CreateFile provides a mock function with given fields: ctx, file
func (_m *MockDB) CreateFile(ctx context.Context, file *snips.File) error {
	ret := _m.Called(ctx, file)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *snips.File) error); ok {
		r0 = rf(ctx, file)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateUserWithPublicKey provides a mock function with given fields: ctx, publickey
func (_m *MockDB) CreateUserWithPublicKey(ctx context.Context, publickey *snips.PublicKey) (*snips.User, error) {
	ret := _m.Called(ctx, publickey)

	var r0 *snips.User
	if rf, ok := ret.Get(0).(func(context.Context, *snips.PublicKey) *snips.User); ok {
		r0 = rf(ctx, publickey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*snips.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *snips.PublicKey) error); ok {
		r1 = rf(ctx, publickey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteFile provides a mock function with given fields: ctx, id
func (_m *MockDB) DeleteFile(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindFile provides a mock function with given fields: ctx, id
func (_m *MockDB) FindFile(ctx context.Context, id string) (*snips.File, error) {
	ret := _m.Called(ctx, id)

	var r0 *snips.File
	if rf, ok := ret.Get(0).(func(context.Context, string) *snips.File); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*snips.File)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindFilesByUser provides a mock function with given fields: ctx, userID
func (_m *MockDB) FindFilesByUser(ctx context.Context, userID string) ([]*snips.File, error) {
	ret := _m.Called(ctx, userID)

	var r0 []*snips.File
	if rf, ok := ret.Get(0).(func(context.Context, string) []*snips.File); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*snips.File)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindPublicKeyByFingerprint provides a mock function with given fields: ctx, fingerprint
func (_m *MockDB) FindPublicKeyByFingerprint(ctx context.Context, fingerprint string) (*snips.PublicKey, error) {
	ret := _m.Called(ctx, fingerprint)

	var r0 *snips.PublicKey
	if rf, ok := ret.Get(0).(func(context.Context, string) *snips.PublicKey); ok {
		r0 = rf(ctx, fingerprint)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*snips.PublicKey)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, fingerprint)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindUser provides a mock function with given fields: ctx, id
func (_m *MockDB) FindUser(ctx context.Context, id string) (*snips.User, error) {
	ret := _m.Called(ctx, id)

	var r0 *snips.User
	if rf, ok := ret.Get(0).(func(context.Context, string) *snips.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*snips.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Migrate provides a mock function with given fields: ctx
func (_m *MockDB) Migrate(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateFile provides a mock function with given fields: ctx, file
func (_m *MockDB) UpdateFile(ctx context.Context, file *snips.File) error {
	ret := _m.Called(ctx, file)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *snips.File) error); ok {
		r0 = rf(ctx, file)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockDB interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockDB creates a new instance of MockDB. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockDB(t mockConstructorTestingTNewMockDB) *MockDB {
	mock := &MockDB{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
